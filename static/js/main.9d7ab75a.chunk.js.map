{"version":3,"sources":["components/HeaderBar.js","components/Progress.js","components/Screen.js","components/Question/QuestionChoice.js","components/Profile.js","components/Question/SecondChance.js","components/Question/index.js","components/Loading.js","components/Start.js","components/ErrorMessage.js","components/Results.js","containers/Trivia.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","_ref","title","react_default","a","createElement","AppBar_default","position","Grid_Grid_default","container","spacing","justify","item","Toolbar_default","variant","Typography_default","color","align","defaultProps","Progress","classes","percent","LinearProgress_default","value","Screen","className","barTitle","children","progress","document","renderRows","React","Children","map","child","Grid_default","xs","Fragment","components_HeaderBar","direction","wrap","alignItems","QuestionChoice","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","answerCallback","isCorrect","setState","result","handleClick","event","onClick","currentTarget","disabled","renderVariant","_this$props","imageUrl","name","id","Typography_Typography_default","personVariant","gutterBottom","Avatar_default","alt","src","gridImage","state","prevProps","questionNum","_this$state","_this$props2","readOnly","forceResult","classResult","_","isEmpty","Button_default","fullWidth","classNames","button","size","disableRipple","disableFocusRipple","Component","choices","onSubmit","withStyles","theme","formControl","display","marginTop","unit","marginBottom","correct","background","incorrect","width","height","margin","Profile","jobTitle","type","slug","firstName","lastName","headshot","socialLinks","bio","hideJobTitle","Card_default","card","CardMedia_default","cover","image","url","details","CardContent_default","content","component","arguments","length","undefined","isEqual","filterBio","CardActions_default","actions","social","i","Chip_default","key","label","callToAction","window","open","chip","flexDirection","flex","controls","paddingLeft","paddingBottom","playIcon","justifyContent","flexWrap","withTheme","jobTitles","SecondChance","ev","preventDefault","_this$props$answer","answer","answered","selected","onComplete","shuffle","sample","without","_this2","components_Profile","assign","choice","index","isRight","Button_Button_default","concat","root","objectSpread","mixins","gutters","paddingTop","fontWeight","Question","getNewChoices","userChoice","sliceIndex","filter","e","toConsumableArray","slice","secondChanceCompleted","isFinalAnswer","handleOnNext","onNext","didAnswer","renderVariantHeader","showSecondChance","nonSortedChoices","head","Avatar_Avatar_default","renderChoices","number","correctId","hUrl","Question_QuestionChoice","handleOnAnswer","finalScore","bind","assertThisInitialized","prevState","_this$props3","cb","_this$props4","nextIncorrect","_this$state2","_this$props5","question","components_Screen","FormControl_default","Question_SecondChance","aria-label","Forward_default","extendedIcon","SkipNext_default","flexGrow","textAlign","defineProperty","breakpoints","down","bottom","right","marginRight","overflowWrap","headerRight","CircularProgress_default","Start","onStart","paragraph","PlayArrow_default","ErrorMessage","message","onDismiss","loading","Results","userScores","CancelToken","axios","arr","temp","current","pointer","Math","floor","random","isValidHeadshot","mimeType","indexOf","Trivia","status","people","questionBank","callApi","_req","cancel","source","get","cancelToken","token","then","_ref2","data","isArray","catch","error","console","isCancel","log","newGame","forceStart","reduce","res","person","push","userChoices","startGame","prepareQuestionData","handleAnswered","_ref3","_ref4","nextQuestion","_ref5","answeredQuestion","isActive","nextState","qIndex","pIndex","sampleSize","info","toString","_ref6","questions","components_Loading","components_Start","components_Question","components_Results","components_ErrorMessage","createMuiTheme","typography","useNextVariants","App","core_styles","CssBaseline_default","containers_Trivia","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d7ab75a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\n\r\nconst HeaderBar = ({title}) => (\r\n    <AppBar position=\"static\">\r\n        <Grid container spacing={0} justify=\"center\">\r\n            <Grid item>\r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\r\n                        {title}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </Grid>\r\n        </Grid>\r\n    </AppBar>\r\n);\r\n\r\nHeaderBar.defaultProps = {\r\n    title: ''\r\n};\r\n\r\nHeaderBar.propTypes = {\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default HeaderBar;\r\n","import React from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Progress = ({classes,percent}) => (<LinearProgress classes={classes} color=\"secondary\" variant=\"determinate\" value={percent*100} />);\r\n\r\nProgress.defaultProps = {\r\n    classes: {},\r\n    percent: 0\r\n};\r\n\r\nProgress.propTypes = {\r\n    classes: PropTypes.object,\r\n    percent: PropTypes.number\r\n};\r\n\r\nexport default Progress;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport HeaderBar from './HeaderBar';\r\nimport Progress from './Progress'\r\n\r\nconst Screen = ({className, title, barTitle, children, progress}) => {\r\n    //change title of page\r\n    document.title = title;\r\n\r\n    //render the children wrapped into a new grid row\r\n    const renderRows = React.Children.map(children, child => (<Grid item xs={12}>{child}</Grid>));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <HeaderBar title={barTitle || title} />\r\n            <Grid container\r\n                className={className}\r\n                spacing={0}\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                wrap=\"nowrap\"\r\n                alignItems=\"center\">\r\n                {renderRows}\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nScreen.defaultProps = {\r\n    className: 'defaultScreen',\r\n    title: '',\r\n    barTitle: '',\r\n    progress: 0\r\n};\r\n\r\nScreen.propTypes = {\r\n    className: PropTypes.string,\r\n    title: PropTypes.string,\r\n    barTitle: PropTypes.string,\r\n    children: PropTypes.node.isRequired,\r\n    progress: PropTypes.number\r\n};\r\n\r\nexport default Screen\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport classNames from 'classnames';\r\n\r\nconst styles = theme => ({\r\n    formControl: {\r\n        display: 'block',\r\n        marginTop: theme.spacing.unit,\r\n    },\r\n    personVariant: {\r\n\r\n    },\r\n    button: {\r\n        marginBottom: theme.spacing.unit,\r\n        marginTop: theme.spacing.unit,\r\n    },\r\n    correct: {\r\n        background: 'rgba(0, 255, 0, 0.26)'\r\n    },\r\n    incorrect: {\r\n        background: 'rgba(255, 0, 0, 0.26)'\r\n    },\r\n    gridImage:{\r\n        width: 175,\r\n        height: 175,\r\n        margin: 10,\r\n    }\r\n});\r\nclass QuestionChoice extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            disabled: props.disabled || false,\r\n            result: ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.questionNum !== this.props.questionNum){\r\n            this.setState({\r\n                disabled: this.props.disabled,\r\n                result: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    answerCallback = (isCorrect) => {\r\n        this.setState({result: isCorrect ? 'correct' : 'incorrect'})\r\n    };\r\n\r\n    handleClick = event => {\r\n        this.props.onClick(event.currentTarget.value, this.answerCallback);\r\n        this.setState({disabled: true})\r\n    };\r\n\r\n    renderVariant = () => {\r\n        const {classes, variant, imageUrl, name, id} = this.props;\r\n        switch(variant){\r\n            case 'people':\r\n                return <Typography className={classes.personVariant} variant={'caption'} gutterBottom>{name}</Typography>;\r\n            case 'jobTitles':\r\n                return <div>test</div>\r\n            case 'images':\r\n                return <Avatar alt={id} src={imageUrl} className={classes.gridImage} />;\r\n            default:\r\n                return <div className={'invalid-choice-variant'}>{id}</div>\r\n        }\r\n    };\r\n\r\n    render(){\r\n        const {disabled, result} = this.state;\r\n        const {classes, id, readOnly, forceResult} = this.props;\r\n        const classResult = forceResult ? classes[forceResult] : !_.isEmpty(result) ? classes[result] : '';\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    fullWidth\r\n                    className={classNames(classes.button, classResult)}\r\n                    value={id}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    disabled={disabled || readOnly}\r\n                    disableRipple={true}\r\n                    disableFocusRipple={true}\r\n                    onClick={this.handleClick}>\r\n                    {this.renderVariant()}\r\n                </Button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nQuestionChoice.defaultProps = {\r\n    classes: {},\r\n    choices: [],\r\n    onSubmit: () => {},\r\n    disabled: false,\r\n    readOnly: false\r\n};\r\n\r\nQuestionChoice.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    choices: PropTypes.array.isRequired,\r\n    onSubmit: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool\r\n};\r\n\r\nexport default withStyles(styles)(QuestionChoice);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        display: 'flex',\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    content: {\r\n        flex: '1 0 auto',\r\n    },\r\n    cover: {\r\n        width: 151,\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        paddingLeft: theme.spacing.unit,\r\n        paddingBottom: theme.spacing.unit,\r\n    },\r\n    playIcon: {\r\n        height: 38,\r\n        width: 38,\r\n    },\r\n    formControl: {\r\n        display: 'block',\r\n        marginTop: theme.spacing.unit,\r\n    },\r\n    button: {\r\n        marginBottom: theme.spacing.unit,\r\n        marginTop: theme.spacing.unit,\r\n    },\r\n    actions : {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        paddingLeft: theme.spacing.unit,\r\n        paddingBottom: theme.spacing.unit,\r\n    },\r\n    chip: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n});\r\n\r\nconst filterBio = (bio, jobTitle = '') => {\r\n    return _.isEqual(bio, jobTitle) ? '' : bio;\r\n};\r\n\r\nconst Profile = ({\r\n    classes,\r\n    theme,\r\n    variant,\r\n    id,\r\n    type,\r\n    slug,\r\n    jobTitle,\r\n    firstName,\r\n    lastName,\r\n    headshot,\r\n    socialLinks,\r\n    bio,\r\n    hideJobTitle\r\n}) => (\r\n    <React.Fragment>\r\n            <Card className={classes.card}>\r\n                <CardMedia\r\n                    className={classes.cover}\r\n                    image={headshot.url}\r\n                    title={headshot.alt}\r\n                />\r\n                <div className={classes.details}>\r\n                    <CardContent className={classes.content}>\r\n                        <Typography component=\"h5\" variant=\"h5\">\r\n                            {firstName} {lastName}\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                            {!hideJobTitle ? jobTitle : 'Job Title?'}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textPrimary\">\r\n                            {filterBio(bio, jobTitle)}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions className={classes.actions}>\r\n                        {\r\n                            socialLinks.map((social, i) => {\r\n                                return(\r\n                                    <Chip\r\n                                        key={i}\r\n                                        label={social.callToAction}\r\n                                        onClick={() => window.open(social.url, \"_blank\")}\r\n                                        className={classes.chip}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </CardActions>\r\n                </div>\r\n            </Card>\r\n    </React.Fragment>\r\n);\r\n\r\nProfile.defaultProps = {\r\n    variant: 'all',\r\n    type: 'people',\r\n    slug: '',\r\n    jobTitle: 'Former Employee',\r\n    firstName: '',\r\n    lastName: '',\r\n    headshot: {},\r\n    socialLinks: [],\r\n    bio: '',\r\n    hideJobTitle: false,\r\n};\r\n\r\nProfile.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    hideJobTitle: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    slug: PropTypes.string,\r\n    jobTitle: PropTypes.string,\r\n    firstName: PropTypes.string,\r\n    lastName: PropTypes.string,\r\n    headshot: PropTypes.object,\r\n    socialLinks: PropTypes.array,\r\n    bio: PropTypes.string,\r\n    variant: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles, {withTheme: true})(Profile);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Profile from '../Profile';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport _ from 'lodash';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport classNames from 'classnames';\r\n\r\n//TODO: get choices via context api from Trivia towards this component\r\nconst jobTitles = [\"Senior Software Engineer\", \"Principal Software Engineer\", \"Software Engineer\", \"Chief Talent Officer\", \"Senior Technical Recruiter\", \"Principal Software Engineer\", \"CEO\", \"Principal Product Strategist\", \"Chief Technology Officer\", \"Chief Product Officer\", \"Director of Product Strategy\", \"Senior VP of Engineering\", \"Chief Commercial Officer\", \"VP of Product Design\", \"Director of Market Research\", \"VP of Security\", \"Senior Product Designer\", \"Director of Account Services\", \"Senior UX Researcher\", \"Senior Analytics Architect\", \"Platform Software Engineer\", \"Software Testing Analyst\", \"Director of Product Design\", \"Senior Software Testing Analyst\", \"Project Manager\", \"Product Designer\", \"Principal Product Designer\", \"Solutions Architect\", \"VP of Operations - Durham\", \"VP of Business Development\", \"Campus Recruiter\", \"Senior Software Test Analyst\", \"Controller\", \"Product Researcher\", \"Senior Content Strategist\", \"Product Strategist\", \"Software Test Engineer\", \"Senior Product Researcher\", \"Director of Business Development\", \"Analytics Architect\", \"Senior Project Manager\", \"VP and General Counsel\", \"Senior Product Strategist\", \"Product Design Intern\", \"Recruiting Intern\", \"VP of Project Management\", \"Senior Software Test Engineer\", \"Senior Product Researcher in User Experience\", \"Creative Content Specialist\", \"VP of Quality Assurance\", \"Software Engineer Intern\", \"Software Test Engineer Intern\", \"Senior Data Scientist\", \"VP Strategic Alliances\"];\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2\r\n    },\r\n    selected: {\r\n        fontWeight: 900\r\n    },\r\n    correct: {\r\n        background: 'rgba(0, 255, 0, 0.26)'\r\n    },\r\n    incorrect: {\r\n        background: 'rgba(255, 0, 0, 0.26)'\r\n    },\r\n    button: {\r\n        marginBottom: theme.spacing.unit,\r\n        marginTop: theme.spacing.unit,\r\n    },\r\n});\r\nclass SecondChance extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            choices: _.shuffle([props.answer.jobTitle, _.sample(_.without(jobTitles, props.answer.jobTitle))]),\r\n            answered: false,\r\n            selected: ''\r\n        }\r\n    }\r\n\r\n    handleClick = (ev) => {\r\n        ev.preventDefault();\r\n        const {choices} = this.state;\r\n        const {answer: {id, jobTitle}} = this.props;\r\n        const isCorrect = _.isEqual(choices[ev.currentTarget.value].jobTitle, jobTitle);\r\n        this.setState({answered: true, isCorrect: isCorrect, selected: ev.currentTarget.value})\r\n        this.props.onComplete(isCorrect, id)\r\n    };\r\n\r\n\r\n    render(){\r\n        const { answered, choices, selected} = this.state;\r\n        const {classes, answer} = this.props;\r\n\r\n        const renderChoices = () => {\r\n            const classResult = (isRight) => answered ? isRight ? classes.correct : classes.incorrect : '';\r\n            const classSelected = (index) => selected === `${index}` ? classes.selected: '';\r\n            return (choices.map((choice,i) => {\r\n                const isRight = choice === answer.jobTitle;\r\n                return (\r\n                    <Grid item key={i}>\r\n                        <Button\r\n                            fullWidth\r\n                            className={classNames(classes.button, classResult(isRight), classSelected(i))}\r\n                            value={i}\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"large\"\r\n                            disabled = {answered}\r\n                            onClick={this.handleClick}>\r\n                            {choice}\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            }));\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\r\n                        You are granted a second chance!\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Profile {...answer} hideJobTitle={true} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\r\n                        Can you guess {answer.firstName} {answer.lastName}'s job title?\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {renderChoices()}\r\n                </Grid>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n}\r\n\r\nSecondChance.defaultProps = {\r\n    onComplete: () => {}\r\n};\r\n\r\nSecondChance.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onComplete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SecondChance);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Screen from '../Screen'\r\nimport QuestionChoice from './QuestionChoice';\r\nimport _ from 'lodash';\r\nimport FormControl from '@material-ui/core/FormControl/FormControl';\r\nimport Avatar from '@material-ui/core/Avatar/Avatar';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport SecondChance from './SecondChance';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport ForwardIcon from '@material-ui/icons/Forward';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        textAlign: 'center'\r\n    },\r\n    button: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            position: 'fixed',\r\n            bottom: theme.spacing.unit * 2,\r\n            right: theme.spacing.unit * 3\r\n        },\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing.unit,\r\n    },\r\n    question: {\r\n        ...theme.mixins.gutters(),\r\n        paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        overflowWrap: 'break-word'\r\n    },\r\n    headerRight:{\r\n        textAlign: 'right'\r\n    },\r\n    gridImage:{\r\n        width: 175,\r\n        height: 175,\r\n        margin: 10,\r\n    }\r\n});\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            choices: _.shuffle(props.choices),\r\n            incorrect: 0,\r\n            didAnswer: false,\r\n            showSecondChance: false,\r\n            isFinalAnswer: false,\r\n            finalScore: 0\r\n        };\r\n        this.handleOnAnswer = this.handleOnAnswer.bind(this)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        const {number, choices} = this.props;\r\n        if(prevProps.number !== number){\r\n            this.setState({\r\n                choices: _.shuffle(choices),\r\n                incorrect: 0,\r\n                didAnswer: false,\r\n                isFinalAnswer: false,\r\n                showSecondChance: false\r\n            })\r\n        }\r\n    }\r\n\r\n    getNewChoices = (userChoice, sliceIndex = this.state.choices.length - this.state.incorrect) => {\r\n        const {choices} = this.state;\r\n        if(userChoice){\r\n            return choices.filter(e => e !== userChoice)\r\n        } else {\r\n            return [...choices].slice(0, sliceIndex);\r\n        }\r\n    };\r\n\r\n    handleOnAnswer(answer, cb =()=>{}){\r\n        const {correctId, onSubmit} = this.props;\r\n        const isCorrect = _.isEqual(correctId, answer);\r\n\r\n        if(isCorrect) {\r\n            cb(true);\r\n            onSubmit({ correct: 1, answer });\r\n            return this.setState({isFinalAnswer: true, showSecondChance: false, finalScore: 1})\r\n        }\r\n\r\n        this.setState(({choices:currChoices, incorrect:currIncorrect}) => {\r\n            let nextIncorrect = currIncorrect+1;\r\n            let showSecondChance = nextIncorrect >= 4;\r\n            let nextChoices = this.getNewChoices(answer)\r\n\r\n            return {\r\n                didAnswer: true,\r\n                incorrect: nextIncorrect,\r\n                choices: nextChoices,\r\n                showSecondChance\r\n            }\r\n        }, () => {\r\n            cb(false)\r\n        })\r\n    };\r\n\r\n    secondChanceCompleted = (isCorrect, answer) => {\r\n        const {onSubmit} = this.props;\r\n        if(isCorrect){\r\n            onSubmit({ correct: 0.5, answer, type: 'second-chance'});\r\n        }\r\n        this.setState({isFinalAnswer: true})\r\n    };\r\n\r\n    handleOnNext = () => {\r\n        this.props.onNext(this.state.didAnswer);\r\n    };\r\n\r\n    renderVariantHeader = () => {\r\n        const {showSecondChance} = this.state;\r\n        const {classes, variant, choices:nonSortedChoices} = this.props;\r\n        let {headshot: {url}} = _.head(nonSortedChoices);\r\n\r\n        if(showSecondChance) return null;\r\n\r\n        switch(variant){\r\n            case 'people':\r\n                return (\r\n                    <Grid item xs={12}>\r\n                        <Avatar alt={'question image'} src={url} className={classes.gridImage} />\r\n                    </Grid>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    renderChoices = () => {\r\n        const {choices, isFinalAnswer, showSecondChance} = this.state;\r\n        const { number, correctId, variant} = this.props;\r\n\r\n        return (choices.map((choice,i) => {\r\n            const {id, firstName, lastName, headshot: {url:hUrl}} = choice;\r\n            return (\r\n                <Grid item key={`${i}-${id}`}>\r\n                    <QuestionChoice\r\n                        questionNum={number}\r\n                        variant={variant}\r\n                        id={id}\r\n                        imageUrl={hUrl}\r\n                        name={`${firstName} ${lastName}`}\r\n                        readOnly={isFinalAnswer || showSecondChance}\r\n                        forceResult={(isFinalAnswer || showSecondChance) ? (id === correctId ? 'correct' : 'incorrect') : ''}\r\n                        onClick={this.handleOnAnswer}\r\n                    />\r\n                </Grid>\r\n            )\r\n        }));\r\n    };\r\n\r\n\r\n    render() {\r\n        const {number, isFinalAnswer, showSecondChance} = this.state;\r\n        const {classes, question, choices:nonSortedChoices} = this.props;\r\n\r\n        return (\r\n            <Screen className={classes.root} title={question} >\r\n                {this.renderVariantHeader()}\r\n                <FormControl className={classes.formControl}>\r\n                    <Grid container spacing={16} justify=\"center\">\r\n                        {showSecondChance ? <SecondChance number={number} answer={nonSortedChoices[0]} onComplete={this.secondChanceCompleted}/> : this.renderChoices()}\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant={'extendedFab'}\r\n                        color=\"primary\"\r\n                        aria-label=\"Skip/Next Question\"\r\n                        className={classes.button}\r\n                        disabled={!isFinalAnswer && showSecondChance}\r\n                        onClick={this.handleOnNext}>\r\n                        {isFinalAnswer || showSecondChance ? <ForwardIcon className={classes.extendedIcon} /> : <SkipNextIcon className={classes.extendedIcon} /> }\r\n                        {isFinalAnswer || showSecondChance ? 'Next' : 'Skip'} Question\r\n                    </Button>\r\n                </FormControl>\r\n            </Screen>\r\n        )\r\n    }\r\n}\r\n\r\nQuestion.defaultProps = {\r\n    onSubmit: () => {},\r\n    onNext: () => {},\r\n};\r\n\r\nQuestion.propTypes = {\r\n    variant: PropTypes.string,\r\n    classes: PropTypes.object.isRequired,\r\n    number: PropTypes.number.isRequired,\r\n    question: PropTypes.string.isRequired,\r\n    correctId: PropTypes.string.isRequired,\r\n    choices: PropTypes.array.isRequired,\r\n    onSubmit: PropTypes.func,\r\n    onNext: PropTypes.func\r\n};\r\n\r\nexport default withStyles(styles)(Question);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    progress: {\r\n        margin: theme.spacing.unit * 2,\r\n    }\r\n});\r\n\r\nconst Loading = ({classes}) => {\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress className={classes.progress} size={50} />\r\n        </div>\r\n    )\r\n};\r\n\r\nLoading.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Loading);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport Screen from './Screen'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        textAlign: 'center'\r\n    },\r\n    button: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            position: 'fixed',\r\n            bottom: theme.spacing.unit * 2,\r\n            right: theme.spacing.unit * 3\r\n        },\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing.unit,\r\n    },\r\n});\r\n\r\nconst Start = ({classes, onStart}) => {\r\n\r\n    const handleStart = (ev) =>{\r\n        ev.preventDefault();\r\n        onStart();\r\n    };\r\n\r\n    return(\r\n        <Screen title={'Welcome to the Employee Namegame Quiz!'} className={classes.root}>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" paragraph>\r\n                In an effort to help learn the names of our current employees, we have crafted this handy tool to help remember people you may encounter at WillowTree.\r\n            </Typography>\r\n            <Button variant={'extendedFab'} color=\"primary\" aria-label=\"Play\" className={classes.button} onClick={handleStart}>\r\n                <PlayArrowIcon className={classes.extendedIcon} />\r\n                Begin\r\n            </Button>\r\n        </Screen>\r\n    );\r\n};\r\nStart.defaultProps = {\r\n    classes: {},\r\n    onStart: () => {}\r\n};\r\n\r\nStart.propTypes = {\r\n  classes: PropTypes.object,\r\n  onStart: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Start);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Screen from './Screen';\r\n\r\nconst ErrorMessage = ({message, onDismiss, loading}) => {\r\n    return(\r\n        <Screen title={'Error'}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                {message}\r\n            </Typography>\r\n            <Button variant={'raised'} color=\"primary\" aria-label=\"New Game\" onClick={onDismiss} disabled={loading}>\r\n                New Game\r\n            </Button>\r\n        </Screen>\r\n    )\r\n};\r\n\r\nErrorMessage.defaultProps = {\r\n    onDismiss: () => {},\r\n    message: 'Unknown Error',\r\n    loading: false,\r\n};\r\n\r\nErrorMessage.propTypes = {\r\n    classes: PropTypes.object,\r\n    message: PropTypes.string,\r\n    onDismiss: PropTypes.func,\r\n    loading: PropTypes.bool\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//TODO: calculate sum\r\nconst Results = props => (\r\n    <div>\r\n        Total Score:\r\n        <div>todo: remove skips, add 1s together {props.userScores}</div>\r\n    </div>\r\n\r\n);\r\n\r\nResults.defaultProps = {\r\n    classes: {},\r\n};\r\n\r\nResults.propTypes = {\r\n    classes: PropTypes.object,\r\n    usersScores: PropTypes.object\r\n};\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport axios from 'axios';\r\nimport Question from '../components/Question';\r\nimport Loading from '../components/Loading';\r\nimport Start from '../components/Start';\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport Results from '../components/Results';\r\nconst CancelToken = axios.CancelToken;\r\n\r\nconst shuffle = (arr) => {\r\n    let temp, pointer = arr.length, current;\r\n\r\n    if(pointer)\r\n        while(pointer--){\r\n        current = Math.floor(Math.random() * (pointer+1));\r\n        temp = arr[current];\r\n        arr[current] = arr[pointer];\r\n        arr[pointer] = temp;\r\n    }\r\n    return arr;\r\n};\r\n\r\n//TODO: a lot of these api responses, should be cleaned up on the server level to not return values when invalid or return default images.\r\nconst isValidHeadshot = ({type, mimeType, id, alt, url}) => {\r\n    return (\r\n        mimeType && (['image/jpeg', 'image/png'].indexOf(mimeType) > -1)\r\n        && url && !_.isEqual(url, '//images.ctfassets.net/3cttzl4i3k1h/5ZUiD3uOByWWuaSQsayAQ6/c630e7f851d5adb1876c118dc4811aed/featured-image-TEST1.png')\r\n        && id && !_.isEqual(id, 'no id configured')\r\n        && alt && !_.isEqual(alt, 'no title configured')\r\n    )\r\n};\r\n\r\n//TODO: replace axios with fetch w/ abortcontroller\r\n/**\r\n * This is the main container for the Trivia Component.\r\n * @see App\r\n */\r\nclass Trivia extends Component {\r\n    state = {\r\n        status: 'loading',\r\n        message: '',\r\n        loading: true,\r\n        people: [],\r\n        questionNum: 1,\r\n        question: {},\r\n        questionBank: [],\r\n        userScores: [],\r\n        jobTitles: []\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.newGame();\r\n    };\r\n\r\n    /**\r\n     * Captures errors within the Trivia app\r\n     * @param error\r\n     * @param info\r\n     */\r\n    componentDidCatch(error, info){\r\n        this.setState({status: 'error', loading: false, message: error.toString()})\r\n    };\r\n\r\n    /**\r\n     * Calls the api to get questions\r\n     * @param cb\r\n     */\r\n    callApi = (cb) => {\r\n\r\n        // cancel previous request\r\n        if (typeof this._req !== typeof undefined) {\r\n            this._req.cancel('Operation canceled due to new ')\r\n        }\r\n        this._req = CancelToken.source();\r\n\r\n        this.setState({loading: true}, () => {\r\n            axios.get('https://willowtreeapps.com/api/v1.0/profiles/', {\r\n                cancelToken: this._req.token\r\n                })\r\n                .then(({data, status}) => {\r\n                    _.isEqual(status, 200) && _.isArray(data) ? cb(data) : cb([]);\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                    if (axios.isCancel(error)) {\r\n                        console.log('Request canceled', error);\r\n                    } else {\r\n                        this.setState({\r\n                            loading: false, status: 'error', message: 'There are no people available! Either a problem with the api or your internet connection is freaking out!',\r\n                        });\r\n                    }\r\n                })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset the state to view the start screen\r\n     * @param shuffle rearrange questions\r\n     */\r\n    resetGame(shuffle){\r\n        this.setState(({questions}) => {\r\n\r\n            let nextState = {\r\n                loading: false,\r\n                questionNum: 1,\r\n                userScores: [],\r\n                userChoices: [],\r\n                status: 'ready'\r\n            };\r\n\r\n            if(shuffle) nextState.questions = _.shuffle(questions);\r\n\r\n            return nextState\r\n        })\r\n    };\r\n\r\n    /**\r\n     * Resets the state for quiz answering\r\n     * @see Start\r\n     * @param forceStart\r\n     */\r\n     newGame = (forceStart) => {\r\n        this.callApi((people) => {\r\n            //Let us filter out non current employees (TODO: this should be on the server level so it does not waste the users' bandwidth)\r\n\r\n            const jobTitles = [];\r\n            let questionBank = shuffle(people.reduce((res, person, i) => {\r\n                 //get a job title if any\r\n                if(person.jobTitle){\r\n                    //add to jobTitles array if not exist\r\n                    if(jobTitles.indexOf(person.jobTitle) <= -1) jobTitles.push(person.jobTitle);\r\n\r\n                    //filter invalid headshot images\r\n                    if(isValidHeadshot(person.headshot)) res.push(i)\r\n                }\r\n                return res;\r\n            }, []));\r\n\r\n            //filter invalid images\r\n            this.setState(() => {\r\n                let status = _.isEmpty(people) ? 'error' : forceStart ? 'active' : 'ready';\r\n                let message = _.isEmpty(people) ? 'No People Received' : '';\r\n                return {\r\n                    status,\r\n                    message,\r\n                    loading: false,\r\n                    people,\r\n                    questionNum: 1,\r\n                    questionBank,\r\n                    userScores: [],\r\n                    userChoices: [],\r\n                    jobTitles\r\n                }\r\n            });\r\n        })\r\n    };\r\n\r\n    /**\r\n     * Starts the game, sets question 1\r\n     * @see Question\r\n     */\r\n    startGame = () => {\r\n        this.setState({\r\n            status: 'active',\r\n            questionNum: 1,\r\n            question:  this.prepareQuestionData(1),\r\n            userScores: [],\r\n            userChoices: [],\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Handles when a Question is answered through onSubmit\r\n     * @see Question\r\n     * @param correct\r\n     * @param answer  the answer\r\n     */\r\n    handleAnswered = ({correct, answer}) => {\r\n        return this.setState(({questionBank, people, questionNum, userScores, userChoices}) => {\r\n            return ({\r\n                userScores: [...userScores, correct],\r\n                userChoices: [...userChoices, answer]\r\n            })\r\n        })\r\n    };\r\n\r\n    nextQuestion = () => {\r\n        return this.setState(({questionBank, people, questionNum, userScores, userChoices}) => {\r\n            let answeredQuestion = userChoices.length === questionNum;\r\n            let nextQuestion = questionNum + 1;\r\n            let isActive = nextQuestion <= questionBank.length;\r\n\r\n            let nextState = {\r\n                status: isActive ? 'active': 'finished',\r\n                questionNum: nextQuestion,\r\n                question: isActive ? this.prepareQuestionData(nextQuestion) : {}\r\n            };\r\n\r\n            if(!answeredQuestion){\r\n                nextState.userScores = [...userScores, 0];\r\n                nextState.userChoices = [...userChoices, 'SKIP'];\r\n            }\r\n\r\n            return nextState;\r\n        })\r\n    };\r\n\r\n\r\n\r\n    prepareQuestionData = (qIndex) => {\r\n        const {questionBank, people} = this.state;\r\n        const pIndex = questionBank[qIndex-1];\r\n        const correct = people[pIndex];\r\n        const {firstName, lastName, id} = correct;\r\n\r\n        const incorrect = _.sampleSize(_.without(questionBank, pIndex), 4).map(i => people[i]);\r\n        const variant = _.random(1,0) === 1 ? 'people' : 'images';\r\n        let question;\r\n\r\n        switch(variant){\r\n            case 'people':\r\n                question = `Which person matches the photo?`;\r\n                break;\r\n            case 'images':\r\n            default:\r\n                question = `Who is ${firstName} ${lastName}?`;\r\n                break;\r\n        }\r\n\r\n        return ({\r\n            variant,\r\n            question,\r\n            correctId: id,\r\n            choices: [correct, ...incorrect]\r\n        })\r\n    };\r\n\r\n    //main render function\r\n    render() {\r\n        const {question, questionNum, userScores, status, message, loading} = this.state;\r\n\r\n        if(loading) return <Loading />;\r\n\r\n        switch(status){\r\n            case 'ready':\r\n                return <Start onStart={this.startGame}/>;\r\n            case 'active':\r\n                return <Question number={questionNum} onSubmit={this.handleAnswered} onNext={this.nextQuestion} {...question} />;\r\n            case 'finished': //TODO: add leaderboard\r\n                return <Results userScores={userScores}/>;\r\n            case 'error':\r\n            default:\r\n                return <ErrorMessage message={message} onDismiss={this.newGame} disabled={loading} />;\r\n        }\r\n    };\r\n}\r\n\r\nexport default Trivia\r\n","import React from 'react';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Trivia from './containers/Trivia';\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n});\n\nconst App = () => (\n    <div className=\"root\">\n        <MuiThemeProvider theme={theme}>\n            <CssBaseline/>\n            <Trivia />\n        </MuiThemeProvider>\n    </div>\n);\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}